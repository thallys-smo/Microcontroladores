;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 05/06/2024 15:05:17
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EF6B  	GOTO        214
_interruptHandler:
;Projeto2.c,61 :: 		void interruptHandler() iv 0x0008 ics ICS_AUTO {
0x0008	0xF015C000  	MOVFF       R0, 21
;Projeto2.c,62 :: 		if(INTCON.INT0IF ==1) { // checa acionamento do botão RB0
0x000C	0xF019CFF5  	MOVFF       TABLAT, 25
0x0010	0xF016CFF8  	MOVFF       TBLPTRU, 22
0x0014	0xF017CFF7  	MOVFF       TBLPTRH, 23
0x0018	0xF018CFF6  	MOVFF       TBLPTR, 24
0x001C	0xA2F2      	BTFSS       INTCON, 1 
0x001E	0xD002      	BRA         L_interruptHandler2
;Projeto2.c,63 :: 		pressedButton = 0; // botao RB0 -> botao = 0
0x0020	0x6A1B      	CLRF        _pressedButton 
;Projeto2.c,64 :: 		INTCON.INT0IF = 0; // limpar valor do botao de interrupcao
0x0022	0x92F2      	BCF         INTCON, 1 
;Projeto2.c,65 :: 		}
L_interruptHandler2:
;Projeto2.c,67 :: 		if(INTCON3.INT1IF == 1) { // checa acionamento do botão RB1
0x0024	0xA0F0      	BTFSS       INTCON3, 0 
0x0026	0xD003      	BRA         L_interruptHandler3
;Projeto2.c,68 :: 		pressedButton = 1; // botao RB1 -> botao = 1
0x0028	0x0E01      	MOVLW       1
0x002A	0x6E1B      	MOVWF       _pressedButton 
;Projeto2.c,69 :: 		INTCON3.INT1IF = 0; // limpar valor do botao de interrupcao
0x002C	0x90F0      	BCF         INTCON3, 0 
;Projeto2.c,70 :: 		}
L_interruptHandler3:
;Projeto2.c,72 :: 		if(INTCON.TMR0IF == 1 && pressedButton != -1) { // checa interrupcao pelo Timer 0
0x002E	0xA4F2      	BTFSS       INTCON, 2 
0x0030	0xD029      	BRA         L_interruptHandler6
0x0032	0x501B      	MOVF        _pressedButton, 0 
0x0034	0x0AFF      	XORLW       255
0x0036	0xE026      	BZ          L_interruptHandler6
L__interruptHandler12:
;Projeto2.c,73 :: 		PORTD = displayValues[counterIndex]; // exibe o digito atual no display
0x0038	0x0EF2      	MOVLW       _displayValues
0x003A	0x241A      	ADDWF       _counterIndex, 0 
0x003C	0x6EF6      	MOVWF       TBLPTR 
0x003E	0x0E00      	MOVLW       hi_addr(_displayValues)
0x0040	0x6EF7      	MOVWF       TBLPTR+1 
0x0042	0x0E00      	MOVLW       0
0x0044	0x22F7      	ADDWFC      TBLPTR+1, 1 
0x0046	0x0E00      	MOVLW       higher_addr(_displayValues)
0x0048	0x6EF8      	MOVWF       TBLPTR+2 
0x004A	0x0E00      	MOVLW       0
0x004C	0x22F8      	ADDWFC      TBLPTR+2, 1 
0x004E	0x0009      	TBLRD*+
0x0050	0xFF83CFF5  	MOVFF       TABLAT, PORTD
;Projeto2.c,74 :: 		if(counterIndex<9) {
0x0054	0x0E09      	MOVLW       9
0x0056	0x5C1A      	SUBWF       _counterIndex, 0 
0x0058	0xE202      	BC          L_interruptHandler7
;Projeto2.c,75 :: 		counterIndex+=1; // enquanto não estiver no final, incrementa 1 no contador
0x005A	0x2A1A      	INCF        _counterIndex, 1 
;Projeto2.c,76 :: 		}
0x005C	0xD001      	BRA         L_interruptHandler8
L_interruptHandler7:
;Projeto2.c,78 :: 		counterIndex=0; // quando chega no final, reinicia a contagem
0x005E	0x6A1A      	CLRF        _counterIndex 
;Projeto2.c,79 :: 		}
L_interruptHandler8:
;Projeto2.c,81 :: 		T0CON.TMR0ON = 0; // desativa o timer
0x0060	0x9ED5      	BCF         T0CON, 7 
;Projeto2.c,83 :: 		if(pressedButton == 0) {
0x0062	0x501B      	MOVF        _pressedButton, 0 
0x0064	0x0A00      	XORLW       0
0x0066	0xE103      	BNZ         L_interruptHandler9
;Projeto2.c,84 :: 		T0CON = 0b00000100; // configura o intervalo de mudança de numero para 1s
0x0068	0x0E04      	MOVLW       4
0x006A	0x6ED5      	MOVWF       T0CON 
;Projeto2.c,85 :: 		}
0x006C	0xD005      	BRA         L_interruptHandler10
L_interruptHandler9:
;Projeto2.c,86 :: 		else if(pressedButton == 1) {
0x006E	0x501B      	MOVF        _pressedButton, 0 
0x0070	0x0A01      	XORLW       1
0x0072	0xE102      	BNZ         L_interruptHandler11
;Projeto2.c,87 :: 		T0CON = 0b00000010; // configura o intervalo de mudança de numero para 0.25s
0x0074	0x0E02      	MOVLW       2
0x0076	0x6ED5      	MOVWF       T0CON 
;Projeto2.c,88 :: 		}
L_interruptHandler11:
L_interruptHandler10:
;Projeto2.c,90 :: 		TMR0L = 0xDC; // set do limite inferior do timer em hexadecimal
0x0078	0x0EDC      	MOVLW       220
0x007A	0x6ED6      	MOVWF       TMR0L 
;Projeto2.c,92 :: 		TMR0H = 0x0B; // set do limite superior do timer em hexadecimal
0x007C	0x0E0B      	MOVLW       11
0x007E	0x6ED7      	MOVWF       TMR0H 
;Projeto2.c,94 :: 		T0CON.TMR0ON = 1; // Liga o timer
0x0080	0x8ED5      	BSF         T0CON, 7 
;Projeto2.c,96 :: 		T0CON.TMR0IF = 0; // limpa a interrupção do timer
0x0082	0x94D5      	BCF         T0CON, 2 
;Projeto2.c,98 :: 		}
L_interruptHandler6:
;Projeto2.c,99 :: 		}
L_end_interruptHandler:
L__interruptHandler15:
0x0084	0xFFF5C019  	MOVFF       25, TABLAT
0x0088	0xFFF8C016  	MOVFF       22, TBLPTRU
0x008C	0xFFF7C017  	MOVFF       23, TBLPTRH
0x0090	0xFFF6C018  	MOVFF       24, TBLPTR
0x0094	0xF000C015  	MOVFF       21, R0
0x0098	0x0011      	RETFIE      1
; end of _interruptHandler
_configureGlobalInterruptions:
;Projeto2.c,107 :: 		void configureGlobalInterruptions() {
;Projeto2.c,108 :: 		INTCON.GIEH = 1; // Ativa interrupcoes de alta prioridade
0x009A	0x8EF2      	BSF         INTCON, 7 
;Projeto2.c,109 :: 		INTCON.GIEL = 1; // Ativa interrupcoes de baixa prioridade
0x009C	0x8CF2      	BSF         INTCON, 6 
;Projeto2.c,110 :: 		RCON.IPEN = 1; // Ativa o seletor de prioridades das interrupcoes
0x009E	0x8ED0      	BSF         RCON, 7 
;Projeto2.c,111 :: 		}
L_end_configureGlobalInterruptions:
0x00A0	0x0012      	RETURN      0
; end of _configureGlobalInterruptions
_configureTimer0:
;Projeto2.c,113 :: 		void configureTimer0() {
;Projeto2.c,114 :: 		INTCON.TMR0IF = 1; // Configura botao de interrupcao do timer
0x00A2	0x84F2      	BSF         INTCON, 2 
;Projeto2.c,115 :: 		INTCON2.TMR0IP = 1; // Muda prioridade de interrupcao do timer para alta
0x00A4	0x84F1      	BSF         INTCON2, 2 
;Projeto2.c,116 :: 		INTCON.TMR0IE = 1; // Ativa a interrupcao do timer
0x00A6	0x8AF2      	BSF         INTCON, 5 
;Projeto2.c,117 :: 		}
L_end_configureTimer0:
0x00A8	0x0012      	RETURN      0
; end of _configureTimer0
_configureButtonInterruptions:
;Projeto2.c,119 :: 		void configureButtonInterruptions() {
;Projeto2.c,120 :: 		INTCON.INT0IF = 0; // Limpa flag de interrupcao do INT0
0x00AA	0x92F2      	BCF         INTCON, 1 
;Projeto2.c,121 :: 		INTCON.INT0IE = 1; // Ativa a flag de interrupcao do INT0
0x00AC	0x88F2      	BSF         INTCON, 4 
;Projeto2.c,123 :: 		INTCON.INT1IF = 0; // Limpa flag de interrupcao do INT1
0x00AE	0x90F2      	BCF         INTCON, 0 
;Projeto2.c,124 :: 		INTCON.INT1IP = 1; // Muda prioridade de interrupção de INT1 para alta
0x00B0	0x8CF2      	BSF         INTCON, 6 
;Projeto2.c,125 :: 		INTCON.INT1IE = 1; // Limpa flag de interrupcao do INT1
0x00B2	0x86F2      	BSF         INTCON, 3 
;Projeto2.c,127 :: 		INTCON2.INTEDG0 = 1; // Configura borda de ativação de interrupcao do INT0 como subida
0x00B4	0x8CF1      	BSF         INTCON2, 6 
;Projeto2.c,129 :: 		TRISB.RB0 = 1; // Configura pino RB0 com entrada da PORTB
0x00B6	0x8093      	BSF         TRISB, 0 
;Projeto2.c,130 :: 		TRISB.RB1 = 1; // Configura pino RB1 como entrada da PORTB
0x00B8	0x8293      	BSF         TRISB, 1 
;Projeto2.c,131 :: 		}
L_end_configureButtonInterruptions:
0x00BA	0x0012      	RETURN      0
; end of _configureButtonInterruptions
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x00BC	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x00BE	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x00C2	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x00C4	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x00C6	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x00C8	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x00CA	0x0012      	RETURN      0
; end of ___CC2DW
_configureTimer:
;Projeto2.c,101 :: 		void configureTimer() {
;Projeto2.c,102 :: 		T0CON = 0b00000110; // configura timer de 16 bits
0x00CC	0x0E06      	MOVLW       6
0x00CE	0x6ED5      	MOVWF       T0CON 
;Projeto2.c,103 :: 		INTCON.TMR0IF = 0; // limpa interupção do timer
0x00D0	0x94F2      	BCF         INTCON, 2 
;Projeto2.c,104 :: 		T0CON.TMR0ON = 1; // liga o timer
0x00D2	0x8ED5      	BSF         T0CON, 7 
;Projeto2.c,105 :: 		}
L_end_configureTimer:
0x00D4	0x0012      	RETURN      0
; end of _configureTimer
_main:
0x00D6	0x6A1A      	CLRF        _counterIndex 
0x00D8	0x0EFF      	MOVLW       255
0x00DA	0x6E1B      	MOVWF       _pressedButton 
;Projeto2.c,33 :: 		void main() {
;Projeto2.c,40 :: 		ADCON1 |= 0x0F;
0x00DC	0x0E0F      	MOVLW       15
0x00DE	0x12C1      	IORWF       ADCON1, 1 
;Projeto2.c,41 :: 		INTCON2.RBPU = 0; // habilita chave global dos resistores pull-up presente no PORTB
0x00E0	0x9EF1      	BCF         INTCON2, 7 
;Projeto2.c,44 :: 		TRISD = 0;
0x00E2	0x6A95      	CLRF        TRISD 
;Projeto2.c,45 :: 		PORTD = 0; // apaga todos os segmentos do display
0x00E4	0x6A83      	CLRF        PORTD 
;Projeto2.c,46 :: 		configureTimer();
0x00E6	0xDFF2      	RCALL       _configureTimer
;Projeto2.c,47 :: 		configureGlobalInterruptions();
0x00E8	0xDFD8      	RCALL       _configureGlobalInterruptions
;Projeto2.c,48 :: 		configureTimer0();
0x00EA	0xDFDB      	RCALL       _configureTimer0
;Projeto2.c,49 :: 		configureButtonInterruptions();
0x00EC	0xDFDE      	RCALL       _configureButtonInterruptions
;Projeto2.c,50 :: 		while(1) {
L_main0:
;Projeto2.c,55 :: 		}
0x00EE	0xD7FF      	BRA         L_main0
;Projeto2.c,56 :: 		}
L_end_main:
0x00F0	0xD7FF      	BRA         $+0
; end of _main
;Projeto2.c,1 :: _displayValues
0x00F2	0x60FC ;_displayValues+0
0x00F4	0xF2DA ;_displayValues+2
0x00F6	0xB666 ;_displayValues+4
0x00F8	0xE0BE ;_displayValues+6
0x00FA	0xF6FE ;_displayValues+8
; end of _displayValues
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008     [146]    _interruptHandler
0x009A       [8]    _configureGlobalInterruptions
0x00A2       [8]    _configureTimer0
0x00AA      [18]    _configureButtonInterruptions
0x00BC      [16]    ___CC2DW
0x00CC      [10]    _configureTimer
0x00D6      [28]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x001A       [1]    _counterIndex
0x001B       [1]    _pressedButton
0x0F83       [1]    PORTD
0x0F93       [1]    TRISB
0x0F95       [1]    TRISD
0x0FC1       [1]    ADCON1
0x0FD0       [1]    RCON
0x0FD5       [1]    T0CON
0x0FD6       [1]    TMR0L
0x0FD7       [1]    TMR0H
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF0       [1]    INTCON3
0x0FF1       [1]    INTCON2
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF6       [3]    TBLPTR
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x00F2      [10]    _displayValues
